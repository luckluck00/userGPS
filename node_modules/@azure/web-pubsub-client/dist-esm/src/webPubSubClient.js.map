{"version":3,"file":"webPubSubClient.js","sourceRoot":"","sources":["../../src/webPubSubClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortController, AbortSignalLike } from \"@azure/abort-controller\";\nimport { delay } from \"@azure/core-util\";\nimport EventEmitter from \"events\";\nimport { SendMessageError, SendMessageErrorOptions } from \"./errors\";\nimport { logger } from \"./logger\";\nimport {\n  WebPubSubResult,\n  JoinGroupOptions,\n  LeaveGroupOptions,\n  OnConnectedArgs,\n  OnDisconnectedArgs,\n  OnGroupDataMessageArgs,\n  OnServerDataMessageArgs,\n  OnStoppedArgs,\n  WebPubSubRetryOptions,\n  SendEventOptions,\n  SendToGroupOptions,\n  WebPubSubClientOptions,\n  OnRejoinGroupFailedArgs,\n  StartOptions,\n  GetClientAccessUrlOptions,\n} from \"./models\";\nimport {\n  ConnectedMessage,\n  DisconnectedMessage,\n  GroupDataMessage,\n  ServerDataMessage,\n  WebPubSubDataType,\n  WebPubSubMessage,\n  JoinGroupMessage,\n  LeaveGroupMessage,\n  SendToGroupMessage,\n  SendEventMessage,\n  AckMessage,\n  SequenceAckMessage,\n} from \"./models/messages\";\nimport { WebPubSubClientProtocol, WebPubSubJsonReliableProtocol } from \"./protocols\";\nimport { WebPubSubClientCredential } from \"./webPubSubClientCredential\";\nimport { WebSocketClientFactory } from \"./websocket/websocketClient\";\nimport { WebSocketClientFactoryLike, WebSocketClientLike } from \"./websocket/websocketClientLike\";\nimport { abortablePromise } from \"./utils/abortablePromise\";\n\nenum WebPubSubClientState {\n  Stopped = \"Stopped\",\n  Disconnected = \"Disconnected\",\n  Connecting = \"Connecting\",\n  Connected = \"Connected\",\n  Recovering = \"Recovering\",\n}\n\n/**\n * Types which can be serialized and sent as JSON.\n */\nexport type JSONTypes = string | number | boolean | object;\n\n/**\n * The WebPubSub client\n */\nexport class WebPubSubClient {\n  private readonly _protocol: WebPubSubClientProtocol;\n  private readonly _credential: WebPubSubClientCredential;\n  private readonly _options: WebPubSubClientOptions;\n  private readonly _groupMap: Map<string, WebPubSubGroup>;\n  private readonly _ackMap: Map<number, AckEntity>;\n  private readonly _sequenceId: SequenceId;\n  private readonly _messageRetryPolicy: RetryPolicy;\n  private readonly _reconnectRetryPolicy: RetryPolicy;\n\n  private readonly _emitter: EventEmitter = new EventEmitter();\n  private _state: WebPubSubClientState;\n  private _isStopping: boolean = false;\n  private _ackId: number;\n\n  // connection lifetime\n  private _wsClient?: WebSocketClientLike;\n  private _uri?: string;\n  private _lastCloseEvent?: { code: number; reason: string };\n  private _lastDisconnectedMessage?: DisconnectedMessage;\n  private _connectionId?: string;\n  private _reconnectionToken?: string;\n  private _isInitialConnected = false;\n  private _sequenceAckTask?: AbortableTask;\n\n  private nextAckId(): number {\n    this._ackId = this._ackId + 1;\n    return this._ackId;\n  }\n\n  /**\n   * Create an instance of WebPubSubClient\n   * @param clientAccessUri - The uri to connect\n   * @param options - The client options\n   */\n  constructor(clientAccessUri: string, options?: WebPubSubClientOptions);\n  /**\n   * Create an instance of WebPubSubClient\n   * @param credential - The credential to use when connecting\n   * @param options - The client options\n   */\n  constructor(credential: WebPubSubClientCredential, options?: WebPubSubClientOptions);\n  constructor(credential: string | WebPubSubClientCredential, options?: WebPubSubClientOptions) {\n    if (typeof credential === \"string\") {\n      this._credential = { getClientAccessUrl: credential } as WebPubSubClientCredential;\n    } else {\n      this._credential = credential;\n    }\n\n    if (options == null) {\n      options = {};\n    }\n    this._buildDefaultOptions(options);\n    this._options = options;\n\n    this._messageRetryPolicy = new RetryPolicy(this._options.messageRetryOptions!);\n    this._reconnectRetryPolicy = new RetryPolicy(this._options.reconnectRetryOptions!);\n\n    this._protocol = this._options.protocol!;\n    this._groupMap = new Map<string, WebPubSubGroup>();\n    this._ackMap = new Map<number, AckEntity>();\n    this._sequenceId = new SequenceId();\n\n    this._state = WebPubSubClientState.Stopped;\n    this._ackId = 0;\n  }\n\n  /**\n   * Start to start to the service.\n   * @param abortSignal - The abort signal\n   */\n  public async start(options?: StartOptions): Promise<void> {\n    if (this._isStopping) {\n      throw new Error(\"Can't start a client during stopping\");\n    }\n\n    if (this._state !== WebPubSubClientState.Stopped) {\n      throw new Error(\"Client can be only started when it's Stopped\");\n    }\n\n    let abortSignal: AbortSignalLike | undefined;\n    if (options) {\n      abortSignal = options.abortSignal;\n    }\n\n    try {\n      await this._startCore(abortSignal);\n    } catch (err) {\n      // this two sentense should be set together. Consider client.stop() is called during _startCore()\n      this._changeState(WebPubSubClientState.Stopped);\n      this._isStopping = false;\n      throw err;\n    }\n  }\n\n  private async _startFromRestarting(abortSignal?: AbortSignalLike): Promise<void> {\n    if (this._state !== WebPubSubClientState.Disconnected) {\n      throw new Error(\"Client can be only restarted when it's Disconnected\");\n    }\n\n    try {\n      logger.verbose(\"Staring reconnecting.\");\n      await this._startCore(abortSignal);\n    } catch (err) {\n      this._changeState(WebPubSubClientState.Disconnected);\n      throw err;\n    }\n  }\n\n  private async _startCore(abortSignal?: AbortSignalLike): Promise<void> {\n    this._changeState(WebPubSubClientState.Connecting);\n\n    logger.info(\"Staring a new connection\");\n    // Reset before a pure new connection\n    this._sequenceId.reset();\n    this._isInitialConnected = false;\n    this._lastCloseEvent = undefined;\n    this._lastDisconnectedMessage = undefined;\n    this._connectionId = undefined;\n    this._reconnectionToken = undefined;\n    this._uri = undefined;\n\n    if (typeof this._credential.getClientAccessUrl === \"string\") {\n      this._uri = this._credential.getClientAccessUrl;\n    } else {\n      this._uri = await this._credential.getClientAccessUrl({\n        abortSignal: abortSignal,\n      } as GetClientAccessUrlOptions);\n    }\n\n    if (typeof this._uri !== \"string\") {\n      throw new Error(\n        `The clientAccessUrl must be a string but currently it's ${typeof this._uri}`\n      );\n    }\n    await this._connectCore(this._uri);\n  }\n\n  /**\n   * Stop the client.\n   */\n  public stop(): void {\n    if (this._state === WebPubSubClientState.Stopped || this._isStopping) {\n      return;\n    }\n\n    // TODO: Maybe we need a better logic for stopping control\n    this._isStopping = true;\n    if (this._wsClient && this._wsClient.isOpen()) {\n      this._wsClient.close();\n    } else {\n      this._isStopping = false;\n    }\n  }\n\n  /**\n   * Add handler for connected event\n   * @param event - The event name\n   * @param listener - The handler\n   */\n  public on(event: \"connected\", listener: (e: OnConnectedArgs) => void): void;\n  /**\n   * Add handler for disconnected event\n   * @param event - The event name\n   * @param listener - The handler\n   */\n  public on(event: \"disconnected\", listener: (e: OnDisconnectedArgs) => void): void;\n  /**\n   * Add handler for stopped event\n   * @param event - The event name\n   * @param listener - The handler\n   */\n  public on(event: \"stopped\", listener: (e: OnStoppedArgs) => void): void;\n  /**\n   * Add handler for server messages\n   * @param event - The event name\n   * @param listener - The handler\n   */\n  public on(event: \"server-message\", listener: (e: OnServerDataMessageArgs) => void): void;\n  /**\n   * Add handler for group messags\n   * @param event - The event name\n   * @param listener - The handler\n   */\n  public on(event: \"group-message\", listener: (e: OnGroupDataMessageArgs) => void): void;\n  /**\n   * Add handler for rejoining group failed\n   * @param event - The event name\n   * @param listener - The handler\n   */\n  public on(event: \"rejoin-group-failed\", listener: (e: OnRejoinGroupFailedArgs) => void): void;\n  public on(\n    event:\n      | \"connected\"\n      | \"disconnected\"\n      | \"stopped\"\n      | \"server-message\"\n      | \"group-message\"\n      | \"rejoin-group-failed\",\n    listener: (e: any) => void\n  ): void {\n    this._emitter.on(event, listener);\n  }\n\n  /**\n   * Remove handler for connected event\n   * @param event - The event name\n   * @param listener - The handler\n   */\n  public off(event: \"connected\", listener: (e: OnConnectedArgs) => void): void;\n  /**\n   * Remove handler for disconnected event\n   * @param event - The event name\n   * @param listener - The handler\n   */\n  public off(event: \"disconnected\", listener: (e: OnDisconnectedArgs) => void): void;\n  /**\n   * Remove handler for stopped event\n   * @param event - The event name\n   * @param listener - The handler\n   */\n  public off(event: \"stopped\", listener: (e: OnStoppedArgs) => void): void;\n  /**\n   * Remove handler for server message\n   * @param event - The event name\n   * @param listener - The handler\n   */\n  public off(event: \"server-message\", listener: (e: OnServerDataMessageArgs) => void): void;\n  /**\n   * Remove handler for group message\n   * @param event - The event name\n   * @param listener - The handler\n   */\n  public off(event: \"group-message\", listener: (e: OnGroupDataMessageArgs) => void): void;\n  /**\n   * Remove handler for rejoining group failed\n   * @param event - The event name\n   * @param listener - The handler\n   */\n  public off(event: \"rejoin-group-failed\", listener: (e: OnRejoinGroupFailedArgs) => void): void;\n  public off(\n    event:\n      | \"connected\"\n      | \"disconnected\"\n      | \"stopped\"\n      | \"server-message\"\n      | \"group-message\"\n      | \"rejoin-group-failed\",\n    listener: (e: any) => void\n  ): void {\n    this._emitter.removeListener(event, listener);\n  }\n\n  private _emitEvent(event: \"connected\", args: OnConnectedArgs): void;\n  private _emitEvent(event: \"disconnected\", args: OnDisconnectedArgs): void;\n  private _emitEvent(event: \"stopped\", args: OnStoppedArgs): void;\n  private _emitEvent(event: \"server-message\", args: OnServerDataMessageArgs): void;\n  private _emitEvent(event: \"group-message\", args: OnGroupDataMessageArgs): void;\n  private _emitEvent(event: \"rejoin-group-failed\", args: OnRejoinGroupFailedArgs): void;\n  private _emitEvent(\n    event:\n      | \"connected\"\n      | \"disconnected\"\n      | \"stopped\"\n      | \"server-message\"\n      | \"group-message\"\n      | \"rejoin-group-failed\",\n    args: any\n  ): void {\n    this._emitter.emit(event, args);\n  }\n\n  /**\n   * Send custom event to server\n   * @param eventName - The event name\n   * @param content - The data content\n   * @param dataType - The data type\n   * @param ackId - The optional ackId. If not specified, client will generate one.\n   * @param options - The options\n   * @param abortSignal - The abort signal\n   */\n  public async sendEvent(\n    eventName: string,\n    content: JSONTypes | ArrayBuffer,\n    dataType: WebPubSubDataType,\n    options?: SendEventOptions\n  ): Promise<WebPubSubResult> {\n    return await this._operationExecuteWithRetry(\n      () => this._sendEventAttempt(eventName, content, dataType, options),\n      options?.abortSignal\n    );\n  }\n\n  private async _sendEventAttempt(\n    eventName: string,\n    content: JSONTypes | ArrayBuffer,\n    dataType: WebPubSubDataType,\n    options?: SendEventOptions\n  ): Promise<WebPubSubResult> {\n    const fireAndForget = options?.fireAndForget ?? false;\n    if (!fireAndForget) {\n      return await this._sendMessageWithAckId(\n        (id) => {\n          return {\n            kind: \"sendEvent\",\n            dataType: dataType,\n            data: content,\n            ackId: id,\n            event: eventName,\n          } as SendEventMessage;\n        },\n        options?.ackId,\n        options?.abortSignal\n      );\n    }\n\n    const message = {\n      kind: \"sendEvent\",\n      dataType: dataType,\n      data: content,\n      event: eventName,\n    } as SendEventMessage;\n\n    await this._sendMessage(message, options?.abortSignal);\n    return {} as WebPubSubResult;\n  }\n\n  /**\n   * Join the client to group\n   * @param groupName - The group name\n   * @param options - The join group options\n   */\n  public async joinGroup(groupName: string, options?: JoinGroupOptions): Promise<WebPubSubResult> {\n    return await this._operationExecuteWithRetry(\n      () => this._joinGroupAttempt(groupName, options),\n      options?.abortSignal\n    );\n  }\n\n  private async _joinGroupAttempt(\n    groupName: string,\n    options?: JoinGroupOptions\n  ): Promise<WebPubSubResult> {\n    const group = this._getOrAddGroup(groupName);\n    const result = await this._joinGroupCore(groupName, options);\n    group.isJoined = true;\n    return result;\n  }\n\n  private async _joinGroupCore(\n    groupName: string,\n    options?: JoinGroupOptions\n  ): Promise<WebPubSubResult> {\n    return await this._sendMessageWithAckId(\n      (id) => {\n        return {\n          group: groupName,\n          ackId: id,\n          kind: \"joinGroup\",\n        } as JoinGroupMessage;\n      },\n      options?.ackId,\n      options?.abortSignal\n    );\n  }\n\n  /**\n   * Leave the client from group\n   * @param groupName - The group name\n   * @param ackId - The optional ackId. If not specified, client will generate one.\n   * @param abortSignal - The abort signal\n   */\n  public async leaveGroup(\n    groupName: string,\n    options?: LeaveGroupOptions\n  ): Promise<WebPubSubResult> {\n    return await this._operationExecuteWithRetry(\n      () => this._leaveGroupAttempt(groupName, options),\n      options?.abortSignal\n    );\n  }\n\n  private async _leaveGroupAttempt(\n    groupName: string,\n    options?: LeaveGroupOptions\n  ): Promise<WebPubSubResult> {\n    const group = this._getOrAddGroup(groupName);\n    const result = await this._sendMessageWithAckId(\n      (id) => {\n        return {\n          group: groupName,\n          ackId: id,\n          kind: \"leaveGroup\",\n        } as LeaveGroupMessage;\n      },\n      options?.ackId,\n      options?.abortSignal\n    );\n    group.isJoined = false;\n    return result;\n  }\n\n  /**\n   * Send message to group.\n   * @param groupName - The group name\n   * @param content - The data content\n   * @param dataType - The data type\n   * @param ackId - The optional ackId. If not specified, client will generate one.\n   * @param options - The options\n   * @param abortSignal - The abort signal\n   */\n  public async sendToGroup(\n    groupName: string,\n    content: JSONTypes | ArrayBuffer,\n    dataType: WebPubSubDataType,\n    options?: SendToGroupOptions\n  ): Promise<void | WebPubSubResult> {\n    return await this._operationExecuteWithRetry(\n      () => this._sendToGroupAttempt(groupName, content, dataType, options),\n      options?.abortSignal\n    );\n  }\n\n  private async _sendToGroupAttempt(\n    groupName: string,\n    content: JSONTypes | ArrayBuffer,\n    dataType: WebPubSubDataType,\n    options?: SendToGroupOptions\n  ): Promise<WebPubSubResult> {\n    const fireAndForget = options?.fireAndForget ?? false;\n    const noEcho = options?.noEcho ?? false;\n    if (!fireAndForget) {\n      return await this._sendMessageWithAckId(\n        (id) => {\n          return {\n            kind: \"sendToGroup\",\n            group: groupName,\n            dataType: dataType,\n            data: content,\n            ackId: id,\n            noEcho: noEcho,\n          } as SendToGroupMessage;\n        },\n        options?.ackId,\n        options?.abortSignal\n      );\n    }\n\n    const message = {\n      kind: \"sendToGroup\",\n      group: groupName,\n      dataType: dataType,\n      data: content,\n      noEcho: noEcho,\n    } as SendToGroupMessage;\n\n    await this._sendMessage(message, options?.abortSignal);\n    return {} as WebPubSubResult;\n  }\n\n  private _getWebSocketClientFactory(): WebSocketClientFactoryLike {\n    return new WebSocketClientFactory();\n  }\n\n  private _connectCore(uri: string): Promise<void> {\n    if (this._isStopping) {\n      throw new Error(\"Can't start a client during stopping\");\n    }\n\n    return new Promise<void>((resolve, reject) => {\n      // This part is executed sync\n      const client = (this._wsClient = this._getWebSocketClientFactory().create(\n        uri,\n        this._protocol.name\n      ));\n      client.onopen(() => {\n        // There's a case that client called stop() before this method. We need to check and close it if it's the case.\n        if (this._isStopping) {\n          try {\n            client.close();\n          } catch {}\n\n          reject(new Error(`The client is stopped`));\n        }\n        logger.verbose(\"WebSocket connection has opened\");\n        this._changeState(WebPubSubClientState.Connected);\n        if (this._protocol.isReliableSubProtocol) {\n          if (this._sequenceAckTask != null) {\n            this._sequenceAckTask.abort();\n          }\n          this._sequenceAckTask = new AbortableTask(async () => {\n            const [isUpdated, seqId] = this._sequenceId.tryGetSequenceId();\n            if (isUpdated) {\n              const message: SequenceAckMessage = {\n                kind: \"sequenceAck\",\n                sequenceId: seqId!,\n              };\n              await this._sendMessage(message);\n            }\n          }, 1000);\n        }\n\n        resolve();\n      });\n\n      client.onerror((e) => {\n        if (this._sequenceAckTask != null) {\n          this._sequenceAckTask.abort();\n        }\n        reject(new Error(e));\n      });\n\n      client.onclose((code: number, reason: string) => {\n        if (this._state === WebPubSubClientState.Connected) {\n          logger.verbose(\"WebSocket closed after open\");\n          if (this._sequenceAckTask != null) {\n            this._sequenceAckTask.abort();\n          }\n          logger.info(`WebSocket connection closed. Code: ${code}, Reason: ${reason}`);\n          this._lastCloseEvent = { code: code, reason: reason };\n          this._handleConnectionClose.call(this);\n        } else {\n          logger.verbose(\"WebSocket closed before open\");\n          reject(new Error(`Failed to start WebSocket: ${code}`));\n        }\n      });\n\n      client.onmessage((data: any) => {\n        const handleAckMessage = (message: AckMessage): void => {\n          if (this._ackMap.has(message.ackId)) {\n            const entity = this._ackMap.get(message.ackId)!;\n            this._ackMap.delete(message.ackId);\n            const isDuplicated: boolean =\n              message.error != null && message.error.name === \"Duplicate\";\n            if (message.success || isDuplicated) {\n              entity.resolve({\n                ackId: message.ackId,\n                isDuplicated: isDuplicated,\n              } as WebPubSubResult);\n            } else {\n              entity.reject(\n                new SendMessageError(\"Failed to send message.\", {\n                  ackId: message.ackId,\n                  errorDetail: message.error,\n                } as SendMessageErrorOptions)\n              );\n            }\n          }\n        };\n\n        const handleConnectedMessage = async (message: ConnectedMessage): Promise<void> => {\n          this._connectionId = message.connectionId;\n          this._reconnectionToken = message.reconnectionToken;\n\n          if (!this._isInitialConnected) {\n            this._isInitialConnected = true;\n\n            if (this._options.autoRejoinGroups) {\n              const groupPromises: Promise<void>[] = [];\n              this._groupMap.forEach((g) => {\n                if (g.isJoined) {\n                  groupPromises.push(\n                    (async () => {\n                      try {\n                        await this._joinGroupCore(g.name);\n                      } catch (err) {\n                        this._safeEmitRejoinGroupFailed(g.name, err);\n                      }\n                    })()\n                  );\n                }\n              });\n\n              try {\n                await Promise.all(groupPromises);\n              } catch {}\n            }\n\n            this._safeEmitConnected(message.connectionId, message.userId);\n          }\n        };\n\n        const handleDisconnectedMessage = (message: DisconnectedMessage): void => {\n          this._lastDisconnectedMessage = message;\n        };\n\n        const handleGroupDataMessage = (message: GroupDataMessage): void => {\n          if (message.sequenceId != null) {\n            if (!this._sequenceId.tryUpdate(message.sequenceId)) {\n              // drop duplicated message\n              return;\n            }\n          }\n\n          this._safeEmitGroupMessage(message);\n        };\n\n        const handleServerDataMessage = (message: ServerDataMessage): void => {\n          if (message.sequenceId != null) {\n            if (!this._sequenceId.tryUpdate(message.sequenceId)) {\n              // drop duplicated message\n              return;\n            }\n          }\n\n          this._safeEmitServerMessage(message);\n        };\n\n        let message: WebPubSubMessage | null;\n        try {\n          let convertedData: Buffer | ArrayBuffer | string;\n          if (Array.isArray(data)) {\n            convertedData = Buffer.concat(data);\n          } else {\n            convertedData = data;\n          }\n\n          message = this._protocol.parseMessages(convertedData);\n          if (message === null) {\n            // null means the message is not recognized.\n            return;\n          }\n        } catch (err) {\n          logger.warning(\"An error occurred while parsing the message from service\", err);\n          throw err;\n        }\n\n        try {\n          switch (message.kind) {\n            case \"ack\": {\n              handleAckMessage(message as AckMessage);\n              break;\n            }\n            case \"connected\": {\n              handleConnectedMessage(message as ConnectedMessage);\n              break;\n            }\n            case \"disconnected\": {\n              handleDisconnectedMessage(message as DisconnectedMessage);\n              break;\n            }\n            case \"groupData\": {\n              handleGroupDataMessage(message as GroupDataMessage);\n              break;\n            }\n            case \"serverData\": {\n              handleServerDataMessage(message as ServerDataMessage);\n              break;\n            }\n          }\n        } catch (err) {\n          logger.warning(\n            `An error occurred while handling the message with kind: ${message.kind} from service`,\n            err\n          );\n        }\n      });\n    });\n  }\n\n  private async _handleConnectionCloseAndNoRecovery(): Promise<void> {\n    this._state = WebPubSubClientState.Disconnected;\n\n    this._safeEmitDisconnected(this._connectionId, this._lastDisconnectedMessage);\n\n    // Auto reconnect or stop\n    if (this._options.autoReconnect) {\n      await this._autoReconnect();\n    } else {\n      await this._handleConnectionStopped();\n    }\n  }\n\n  private async _autoReconnect(): Promise<void> {\n    let isSuccess = false;\n    let attempt = 0;\n    try {\n      while (!this._isStopping) {\n        try {\n          await this._startFromRestarting();\n          isSuccess = true;\n          break;\n        } catch (err) {\n          logger.warning(\"An attempt to reconnect connection failed.\", err);\n\n          attempt++;\n          const delayInMs = this._reconnectRetryPolicy.nextRetryDelayInMs(attempt);\n\n          if (delayInMs == null) {\n            break;\n          }\n\n          try {\n            logger.verbose(`Delay time for reconnect attempt ${attempt}: ${delayInMs}`);\n            await delay(delayInMs);\n          } catch {}\n        }\n      }\n    } finally {\n      if (!isSuccess) {\n        this._handleConnectionStopped();\n      }\n    }\n  }\n\n  private _handleConnectionStopped(): void {\n    this._isStopping = false;\n    this._state = WebPubSubClientState.Stopped;\n    this._safeEmitStopped();\n  }\n\n  private async _sendMessage(\n    message: WebPubSubMessage,\n    abortSignal?: AbortSignalLike\n  ): Promise<void> {\n    const payload = this._protocol.writeMessage(message);\n\n    if (!this._wsClient || !this._wsClient.isOpen()) {\n      throw new Error(\"The connection is not connected.\");\n    }\n    await this._wsClient!.send(payload, abortSignal);\n  }\n\n  private async _sendMessageWithAckId(\n    messageProvider: (ackId: number) => WebPubSubMessage,\n    ackId?: number,\n    abortSignal?: AbortSignalLike\n  ): Promise<WebPubSubResult> {\n    if (ackId == null) {\n      ackId = this.nextAckId();\n    }\n\n    const message = messageProvider(ackId);\n    if (!this._ackMap.has(ackId)) {\n      this._ackMap.set(ackId, new AckEntity(ackId));\n    }\n    const entity = this._ackMap.get(ackId)!;\n\n    try {\n      await this._sendMessage(message, abortSignal);\n    } catch (error) {\n      this._ackMap.delete(ackId);\n\n      let errorMessage: string = \"\";\n      if (error instanceof Error) {\n        errorMessage = error.message;\n      }\n      throw new SendMessageError(errorMessage, { ackId: ackId });\n    }\n\n    if (abortSignal) {\n      try {\n        return await abortablePromise(entity.promise(), abortSignal);\n      } catch (err) {\n        if (err instanceof Error && err.name === \"AbortError\") {\n          throw new SendMessageError(\"Cancelled by abortSignal\", { ackId: ackId });\n        }\n        throw err;\n      }\n    }\n\n    return await entity.promise();\n  }\n\n  private async _handleConnectionClose(): Promise<void> {\n    // Clean ack cache\n    this._ackMap.forEach((value, key) => {\n      if (this._ackMap.delete(key)) {\n        value.reject(\n          new SendMessageError(\"Connection is disconnected before receive ack from the service\", {\n            ackId: value.ackId,\n          } as SendMessageErrorOptions)\n        );\n      }\n    });\n\n    if (this._isStopping) {\n      logger.warning(\"The client is stopping state. Stop recovery.\");\n      this._handleConnectionCloseAndNoRecovery();\n      return;\n    }\n\n    if (this._lastCloseEvent && this._lastCloseEvent.code === 1008) {\n      logger.warning(\"The websocket close with status code 1008. Stop recovery.\");\n      this._handleConnectionCloseAndNoRecovery();\n      return;\n    }\n\n    if (!this._protocol.isReliableSubProtocol) {\n      logger.warning(\"The protocol is not reliable, recovery is not applicable\");\n      this._handleConnectionCloseAndNoRecovery();\n      return;\n    }\n\n    // Build recovery uri\n    const recoveryUri = this._buildRecoveryUri();\n    if (!recoveryUri) {\n      logger.warning(\"Connection id or reconnection token is not available\");\n      this._handleConnectionCloseAndNoRecovery();\n      return;\n    }\n\n    // Try recover connection\n    let recovered = false;\n    this._state = WebPubSubClientState.Recovering;\n    const abortSignal = AbortController.timeout(30 * 1000);\n    try {\n      while (!abortSignal.aborted || this._isStopping) {\n        try {\n          await this._connectCore.call(this, recoveryUri);\n          recovered = true;\n          return;\n        } catch {\n          await delay(1000);\n        }\n      }\n    } finally {\n      if (!recovered) {\n        logger.warning(\"Recovery attempts failed more then 30 seconds or the client is stopping\");\n        this._handleConnectionCloseAndNoRecovery();\n      }\n    }\n  }\n\n  private _safeEmitConnected(connectionId: string, userId: string): void {\n    this._emitEvent(\"connected\", {\n      connectionId: connectionId,\n      userId: userId,\n    } as OnConnectedArgs);\n  }\n\n  private _safeEmitDisconnected(\n    connectionId: string | undefined,\n    lastDisconnectedMessage: DisconnectedMessage | undefined\n  ): void {\n    this._emitEvent(\"disconnected\", {\n      connectionId: connectionId,\n      message: lastDisconnectedMessage,\n    } as OnDisconnectedArgs);\n  }\n\n  private _safeEmitGroupMessage(message: GroupDataMessage): void {\n    this._emitEvent(\"group-message\", {\n      message: message,\n    } as OnGroupDataMessageArgs);\n  }\n\n  private _safeEmitServerMessage(message: ServerDataMessage): void {\n    this._emitEvent(\"server-message\", {\n      message: message,\n    } as OnServerDataMessageArgs);\n  }\n\n  private _safeEmitStopped(): void {\n    this._emitEvent(\"stopped\", {});\n  }\n\n  private _safeEmitRejoinGroupFailed(groupName: string, err: unknown): void {\n    this._emitEvent(\"rejoin-group-failed\", {\n      group: groupName,\n      error: err,\n    } as OnRejoinGroupFailedArgs);\n  }\n\n  private _buildDefaultOptions(clientOptions: WebPubSubClientOptions): WebPubSubClientOptions {\n    if (clientOptions.autoReconnect == null) {\n      clientOptions.autoReconnect = true;\n    }\n\n    if (clientOptions.autoRejoinGroups == null) {\n      clientOptions.autoRejoinGroups = true;\n    }\n\n    if (clientOptions.protocol == null) {\n      clientOptions.protocol = WebPubSubJsonReliableProtocol();\n    }\n\n    this._buildMessageRetryOptions(clientOptions);\n    this._buildReconnectRetryOptions(clientOptions);\n\n    return clientOptions;\n  }\n\n  private _buildMessageRetryOptions(clientOptions: WebPubSubClientOptions): void {\n    if (!clientOptions.messageRetryOptions) {\n      clientOptions.messageRetryOptions = {};\n    }\n\n    if (\n      clientOptions.messageRetryOptions.maxRetries == null ||\n      clientOptions.messageRetryOptions.maxRetries < 0\n    ) {\n      clientOptions.messageRetryOptions.maxRetries = 3;\n    }\n\n    if (\n      clientOptions.messageRetryOptions.retryDelayInMs == null ||\n      clientOptions.messageRetryOptions.retryDelayInMs < 0\n    ) {\n      clientOptions.messageRetryOptions.retryDelayInMs = 1000;\n    }\n\n    if (\n      clientOptions.messageRetryOptions.maxRetryDelayInMs == null ||\n      clientOptions.messageRetryOptions.maxRetryDelayInMs < 0\n    ) {\n      clientOptions.messageRetryOptions.maxRetryDelayInMs = 30000;\n    }\n\n    if (clientOptions.messageRetryOptions.mode == null) {\n      clientOptions.messageRetryOptions.mode = \"Fixed\";\n    }\n  }\n\n  private _buildReconnectRetryOptions(clientOptions: WebPubSubClientOptions): void {\n    if (!clientOptions.reconnectRetryOptions) {\n      clientOptions.reconnectRetryOptions = {};\n    }\n\n    if (\n      clientOptions.reconnectRetryOptions.maxRetries == null ||\n      clientOptions.reconnectRetryOptions.maxRetries < 0\n    ) {\n      clientOptions.reconnectRetryOptions.maxRetries = Number.MAX_VALUE;\n    }\n\n    if (\n      clientOptions.reconnectRetryOptions.retryDelayInMs == null ||\n      clientOptions.reconnectRetryOptions.retryDelayInMs < 0\n    ) {\n      clientOptions.reconnectRetryOptions.retryDelayInMs = 1000;\n    }\n\n    if (\n      clientOptions.reconnectRetryOptions.maxRetryDelayInMs == null ||\n      clientOptions.reconnectRetryOptions.maxRetryDelayInMs < 0\n    ) {\n      clientOptions.reconnectRetryOptions.maxRetryDelayInMs = 30000;\n    }\n\n    if (clientOptions.reconnectRetryOptions.mode == null) {\n      clientOptions.reconnectRetryOptions.mode = \"Fixed\";\n    }\n  }\n\n  private _buildRecoveryUri(): string | null {\n    if (this._connectionId && this._reconnectionToken && this._uri) {\n      const url = new URL(this._uri);\n      url.searchParams.append(\"awps_connection_id\", this._connectionId);\n      url.searchParams.append(\"awps_reconnection_token\", this._reconnectionToken);\n      return url.toString();\n    }\n    return null;\n  }\n\n  private _getOrAddGroup(name: string): WebPubSubGroup {\n    if (!this._groupMap.has(name)) {\n      this._groupMap.set(name, new WebPubSubGroup(name));\n    }\n    return this._groupMap.get(name) as WebPubSubGroup;\n  }\n\n  private _changeState(newState: WebPubSubClientState): void {\n    logger.verbose(\n      `The client state transfer from ${this._state.toString()} to ${newState.toString()}`\n    );\n    this._state = newState;\n  }\n\n  private async _operationExecuteWithRetry<T>(\n    inner: () => Promise<T>,\n    signal?: AbortSignalLike\n  ): Promise<T> {\n    let retryAttempt = 0;\n\n    while (true) {\n      try {\n        return await inner.call(this);\n      } catch (err) {\n        retryAttempt++;\n        const delayInMs = this._messageRetryPolicy.nextRetryDelayInMs(retryAttempt);\n        if (delayInMs == null) {\n          throw err;\n        }\n\n        await delay(delayInMs);\n\n        if (signal?.aborted) {\n          throw err;\n        }\n      }\n    }\n  }\n}\n\nclass RetryPolicy {\n  private _retryOptions: WebPubSubRetryOptions;\n  private _maxRetriesToGetMaxDelay: number;\n\n  public constructor(retryOptions: WebPubSubRetryOptions) {\n    this._retryOptions = retryOptions;\n    this._maxRetriesToGetMaxDelay = Math.ceil(\n      Math.log2(this._retryOptions.maxRetryDelayInMs!) -\n        Math.log2(this._retryOptions.retryDelayInMs!) +\n        1\n    );\n  }\n\n  public nextRetryDelayInMs(retryAttempt: number): number | null {\n    if (retryAttempt > this._retryOptions.maxRetries!) {\n      return null;\n    } else {\n      if (this._retryOptions.mode! === \"Fixed\") {\n        return this._retryOptions.retryDelayInMs!;\n      } else {\n        return this._calculateExponentialDelay(retryAttempt);\n      }\n    }\n  }\n\n  private _calculateExponentialDelay(attempt: number): number {\n    if (attempt >= this._maxRetriesToGetMaxDelay) {\n      return this._retryOptions.maxRetryDelayInMs!;\n    } else {\n      return (1 << (attempt - 1)) * this._retryOptions.retryDelayInMs!;\n    }\n  }\n}\n\nclass WebPubSubGroup {\n  public readonly name: string;\n  public isJoined = false;\n\n  constructor(name: string) {\n    this.name = name;\n  }\n}\n\nclass AckEntity {\n  private readonly _promise: Promise<WebPubSubResult>;\n  private _resolve?: (value: WebPubSubResult | PromiseLike<WebPubSubResult>) => void;\n  private _reject?: (reason?: any) => void;\n\n  constructor(ackId: number) {\n    this._promise = new Promise<WebPubSubResult>((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n    this.ackId = ackId;\n  }\n\n  public ackId;\n\n  public promise(): Promise<WebPubSubResult> {\n    return this._promise;\n  }\n\n  public resolve(value: WebPubSubResult | PromiseLike<WebPubSubResult>): void {\n    this._resolve!(value);\n  }\n\n  public reject(reason?: any): void {\n    this._reject!(reason);\n  }\n}\n\nclass SequenceId {\n  private _sequenceId: number;\n  private _isUpdate: boolean;\n\n  constructor() {\n    this._sequenceId = 0;\n    this._isUpdate = false;\n  }\n\n  public tryUpdate(sequenceId: number): boolean {\n    this._isUpdate = true;\n    if (sequenceId > this._sequenceId) {\n      this._sequenceId = sequenceId;\n      return true;\n    }\n    return false;\n  }\n\n  public tryGetSequenceId(): [boolean, number | null] {\n    if (this._isUpdate) {\n      this._isUpdate = false;\n      return [true, this._sequenceId];\n    }\n\n    return [false, null];\n  }\n\n  public reset(): void {\n    this._sequenceId = 0;\n    this._isUpdate = false;\n  }\n}\n\nclass AbortableTask {\n  private readonly _func: (obj?: any) => Promise<void>;\n  private readonly _abortController: AbortController;\n  private readonly _interval: number;\n  private readonly _obj?: any;\n\n  constructor(func: (obj?: any) => Promise<void>, interval: number, obj?: any) {\n    this._func = func;\n    this._abortController = new AbortController();\n    this._interval = interval;\n    this._obj = obj;\n    this._start();\n  }\n\n  public abort(): void {\n    try {\n      this._abortController.abort();\n    } catch {}\n  }\n\n  private async _start(): Promise<void> {\n    const signal = this._abortController.signal;\n    while (!signal.aborted) {\n      try {\n        await this._func(this._obj);\n      } catch {\n      } finally {\n        await delay(this._interval);\n      }\n    }\n  }\n}\n"]}